package offers;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Solution {
	public static void main(String[] args) {
		TreeNode n1 = new TreeNode(5);
		TreeNode n2 = new TreeNode(3);
		TreeNode n3 = new TreeNode(7);
		TreeNode n4 = new TreeNode(2);
		TreeNode n5 = new TreeNode(4);
		TreeNode n6 = new TreeNode(6);
		TreeNode n7 = new TreeNode(8);
		TreeNode n8 = new TreeNode(10);
		n1.right = n3;
		n1.left = n2;
		n3.left = n6;
		n3.right = n7;
		n2.left = n4;
		n2.right = n5;
		// n5.left=n8;
		System.out.println(new Solution().maxDepthQueue(n1));
		int[] a={1,2,3,4,5,6,1,2,3,4,5};
		System.out.println(new Solution().singleNumber(a));
	}
	/***
	 * 找到出现一次的数
	 * @param A
	 * @return
	 */
	public int singleNumber(int[] A) {
		if(A.length==1){
			return A[0];
		}
		Arrays.sort(A);
		for(int i=0;i<A.length;i++){
			if(i==0){
				if(A[i]!=A[i+1]){
					return A[i];
				}
			}else if(i==A.length-1){
				if(A[i]!=A[i-1]){
					return A[i];
				}
			}else{
				if(A[i]!=A[i+1]&&A[i]!=A[i-1]){
					return A[i];
				}
			}
			
		}
	}

	/***
	 * 二叉树的最大深度，递归方法
	 * 
	 * @param root
	 * @return
	 */
	public int maxDepth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
	}

	/***
	 * 二叉树的最大深度，层序遍历方法（队列实现）
	 * 
	 * @param root
	 * @return
	 */
	public int maxDepthQueue(TreeNode root) {
		if (root == null) {
			return 0;
		}
		Queue<TreeNode> qu = new LinkedList<TreeNode>();
		int deep = 0;// 记录深度
		qu.add(root);
		while (!qu.isEmpty()) {
			int size = qu.size();// 二叉树每一层的节点个数，把这些节点取出来，该层遍历结束，深度加1.
			for (int i = 0; i < size; i++) {
				TreeNode temp = qu.poll();
				if (temp.left != null) {
					qu.add(temp.left);
				}
				if (temp.right != null) {
					qu.add(temp.right);
				}
			}
			deep++;
		}
		return deep;
	}

}
