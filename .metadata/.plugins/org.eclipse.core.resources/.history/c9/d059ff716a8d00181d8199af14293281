package offers;

public class Solution {
	public static void main(String[] args) {
		TreeNode n1 = new TreeNode(5);
		TreeNode n2 = new TreeNode(3);
		TreeNode n3 = new TreeNode(7);
		TreeNode n4 = new TreeNode(2);
		TreeNode n5 = new TreeNode(4);
		TreeNode n6 = new TreeNode(6);
		TreeNode n7 = new TreeNode(8);
		TreeNode n8 = new TreeNode(10);
		n1.right = n3;
		n1.left = n2;
		n3.left = n6;
		n3.right = n7;
		n2.left = n4;
		n2.right = n5;
		n5.left=n8;
		System.out.println(new Solution().maxDepth(n1));
	}
	
	/***
	 * 二叉树的最大深度，递归方法
	 * @param root
	 * @return
	 */
	public int maxDepth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
	}
	/***
	 * 二叉树的最大深度，层序遍历方法（队列实现）
	 * @param root
	 * @return
	 */
	public int maxDepthQueue(TreeNode root){
		
	}
	
}
