package offers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

public class Solution {

	public static void main(String[] args) {
		TreeNode n1 = new TreeNode(5);
		TreeNode n2 = new TreeNode(3);
		TreeNode n3 = new TreeNode(7);
		TreeNode n4 = new TreeNode(2);
		TreeNode n5 = new TreeNode(4);
		TreeNode n6 = new TreeNode(6);
		TreeNode n7 = new TreeNode(8);
		n1.right = n3;
		n1.left = n2;
		n3.left = n6;
		n3.right = n7;
		n2.left = n4;
		n2.right = n5;
		ListNode l1 = new ListNode(1);
		ListNode l2 = new ListNode(2);
		ListNode l3 = new ListNode(3);
		ListNode l4 = new ListNode(4);
		ListNode l5 = new ListNode(5);
		ListNode l6 = new ListNode(6);
		l1.next = l2;
		l2.next = l3;
		l3.next = l4;
		l5.next = l3;
		l6.next = l5;
		int[] a = { 364, 637, 341, 406, 747, 995, 234, 971, 571, 219, 993, 407, 416, 366, 315, 301, 601, 650, 418, 355,
				460, 505, 360, 965, 516, 648, 727, 667, 465, 849, 455, 181, 486, 149, 588, 233, 144, 174, 557, 67, 746,
				550, 474, 162, 268, 142, 463, 221, 882, 576, 604, 739, 288, 569, 256, 936, 275, 401, 497, 82, 935, 983,
				583, 523, 697, 478, 147, 795, 380, 973, 958, 115, 773, 870, 259, 655, 446, 863, 735, 784, 3, 671, 433,
				630, 425, 930, 64, 266, 235, 187, 284, 665, 874, 80, 45, 848, 38, 811, 267, 575 };
		int[] b = { 4, 3, 2, 1, 0 };
		int[] c = { 1, 2, 3, 4, 5, 6, 7, 0 };
		// System.out.println(new Solution().InversePairs(a));
		char[] chars = { 'a', 'b', 'c', 'e', 's', 'f', 'c', 's', 'a', 'd', 'e', 'e' };
		char[] path = { 'a', 'b', 'c', 'b', 'd' };
		System.out.println(new Solution().hasPath(chars, 3, 4, path));
	}

	public boolean newHasPath(char[] matrix, int rows, int cols, char[] str) {
		if(matrix==null || str==null || rows<=0||cols<=0){
			return false;
		}
		boolean[] flags = new boolean[rows*cols];
		Arrays.fill(flags, false);
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (newVisited(matrix, str, flags, i, j, rows, cols, 0)) {
					return true;
				}
			}
		}
		return false;
	}

	public boolean newVisited(char[] chs, char[] str, boolean[] flags, int row, int col, int rows, int cols,
			int count) {
		if (count >= str.length) {
			return true;
		}
		boolean flag = false;
		if (row >= 0 && row < rows && col >= 0 && col < cols && !flags[row][col] && chs[row][col] == str[count]) {
			count++;
			flags[row][col] = true;
			flag = visited(chs, str, flags, row, col - 1, rows, cols, count)
					|| visited(chs, str, flags, row, col + 1, rows, cols, count)
					|| visited(chs, str, flags, row - 1, col, rows, cols, count)
					|| visited(chs, str, flags, row + 1, col, rows, cols, count);
			if (!flag) {
				flags[row][col] = false;
				count--;
			}
		}
		return flag;
	}
	
	public boolean hasPath(char[] matrix, int rows, int cols, char[] str) {
		if(matrix==null || str==null || rows<=0||cols<=0){
			return false;
		}
		boolean[][] flags = new boolean[rows][cols];
		char[][] chs = new char[rows][cols];
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				flags[i][j] = false;// 没有经过该节点
				chs[i][j] = matrix[cols * i + j];
			}
		}
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				if (visited(chs, str, flags, i, j, rows, cols, 0)) {
					return true;
				}
			}
		}
		return false;
	}

	public boolean visited(char[][] chs, char[] str, boolean[][] flags, int row, int col, int rows, int cols,
			int count) {
		if (count >= str.length) {
			return true;
		}
		boolean flag = false;
		if (row >= 0 && row < rows && col >= 0 && col < cols && !flags[row][col] && chs[row][col] == str[count]) {
			count++;
			flags[row][col] = true;
			flag = visited(chs, str, flags, row, col - 1, rows, cols, count)
					|| visited(chs, str, flags, row, col + 1, rows, cols, count)
					|| visited(chs, str, flags, row - 1, col, rows, cols, count)
					|| visited(chs, str, flags, row + 1, col, rows, cols, count);
			if (!flag) {
				flags[row][col] = false;
				count--;
			}
		}
		return flag;
	}

	public String PrintMinNumber(int[] numbers) {
		Comparator<Integer> my = new myCompare();
		Integer[] nums = new Integer[numbers.length];
		for (int i = 0; i < numbers.length; i++) {
			nums[i] = numbers[i];
		}
		Arrays.sort(nums, my);
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < numbers.length; i++) {
			sb.append(nums[i].toString() + ",");
		}
		return sb.toString();
	}

	class myCompare implements Comparator<Integer> {

		@Override
		public int compare(Integer num1, Integer num2) {
			String o1 = num1.toString();
			String o2 = num2.toString();
			// TODO Auto-generated method stub
			int len = o1.length() <= o2.length() ? o1.length() : o2.length();
			int tmp = 0;
			for (int i = 0; i < len; i++) {
				if (tmp == 0) {
					tmp = o1.charAt(i) - o2.charAt(i);
				}
			}
			if (tmp == 0) {

				if (o1.length() > o2.length()) {
					int i = len;
					while (i < o1.length()) {
						if (o1.charAt(i) == o2.charAt(len - 1)) {
							i++;
						} else if (o1.charAt(i) >= o2.charAt(len - 1)) {
							return 1;
						} else {
							return -1;
						}
					}
					return -1;
				} else if (o1.length() < o2.length()) {
					int i = len;
					while (i < o2.length()) {
						if (o2.charAt(i) == o1.charAt(len - 1)) {
							i++;
						} else if (o2.charAt(i) >= o1.charAt(len - 1)) {
							return -1;
						} else {
							return 1;
						}
					}
					return 1;
				} else {
					return 0;
				}
			} else {
				return tmp;
			}
		}

	}

	LinkedList<Character> chs = new LinkedList<>();

	public void Insert(char ch) {
		chs.add(ch);
	}

	// return the first appearence once char in current stringstream
	public char FirstAppearingOnce() {
		if (chs.size() == 1) {
			return chs.getLast();
		}
		Character[] cs = new Character[chs.size()];
		for (int i = 0; i < cs.length; i++) {
			cs[i] = chs.get(i);
		}
		Arrays.sort(cs);
		Set<Character> set = new HashSet<>();

		for (int i = 0; i < cs.length; i++) {
			if (i == 0) {
				if (cs[i] != cs[i + 1]) {
					set.add(cs[i]);
				}
			} else if (i == cs.length - 1) {
				if (cs[i] != cs[i - 1]) {
					set.add(cs[i]);
				}
			} else {
				if (cs[i] != cs[i - 1] && cs[i] != cs[i + 1]) {
					set.add(cs[i]);
				}
			}
		}
		for (int i = 0; i < chs.size(); i++) {
			if (set.contains(chs.get(i))) {
				return chs.get(i);
			}
		}
		return '#';
	}

	TreeNode KthNode(TreeNode pRoot, int k) {
		if (pRoot == null || k == 0) {
			return null;
		}

		ArrayList<TreeNode> list = new ArrayList<>();
		LNR(pRoot, list);
		if (list.size() < k) {
			return null;
		} else {
			return list.get(k - 1);
		}

	}

	public void LNR(TreeNode pRoot, ArrayList<TreeNode> list) {
		if (pRoot == null) {
			return;
		}
		LNR(pRoot.left, list);
		list.add(pRoot);
		LNR(pRoot.right, list);
	}

	public ArrayList<Integer> maxInWindows(int[] num, int size) {
		ArrayList<Integer> list = new ArrayList<Integer>();
		if (num == null || num.length == 0 || size == 0) {
			return list;
		}
		int count = num.length - size + 1;// 滑动的次数
		for (int i = 0; i < count; i++) {
			list.add(getMax(Arrays.copyOfRange(num, i, i + size)));
		}
		return list;
	}

	public int getMax(int[] num) {
		if (num.length == 1) {
			return num[0];
		}
		int max = num[0];
		for (int i = 1; i < num.length; i++) {
			if (num[i] >= max) {
				max = num[i];
			}
		}
		return max;
	}

	LinkedList<Integer> numbers = new LinkedList<Integer>();

	public void Insert(Integer num) {
		if (numbers.size() == 0) {
			numbers.add(num);
		} else {
			int end = numbers.size() - 1;
			if (numbers.get(end) <= num) {
				numbers.add(num);
			} else {
				for (int i = 0; i <= end; i++) {
					if (num <= numbers.get(i)) {
						numbers.add(i, num);
						break;
					}
				}
			}
		}

	}

	public Double GetMedian() {
		if (numbers.size() % 2 == 0) {
			return Double.valueOf((numbers.get(numbers.size() / 2) + numbers.get(numbers.size() / 2 - 1))) / 2;
		} else {
			return Double.valueOf(numbers.get(numbers.size() / 2));
		}
	}

	public boolean match(char[] str, char[] pattern) {

		if (str.length == 0 && pattern.length == 0) {
			return true;
		}

		if (str.length == 0 && pattern.length == 1 && pattern[0] == '.') {
			return false;
		}
		if (str.length == 0 && pattern.length == 2 && pattern[1] == '*') {
			return true;
		}
		int i = 0;
		int j = 0;
		while (i <= str.length - 1 && j <= pattern.length - 1) {
			if (str[i] == pattern[j] || pattern[j] == '.') {
				i++;
				j++;
			} else if (str[i] != pattern[j]) {
				if (pattern[j] == '*') {
					j++;
				} else if (pattern[j + 1] == '*') {
					j = j + 2;
				} else {
					return false;
				}
			}
		}

		if ((i <= str.length - 1 && j > pattern.length - 1) || (i > str.length - 1 && j <= pattern.length - 1)) {
			if (j == pattern.length - 2 && pattern[j] == '*') {
				return true;
			}
			if (j == pattern.length - 3 && pattern[j + 2] == '*') {
				return true;
			}
			return false;
		}
		return true;
	}

	public int[] multiply(int[] A) {
		if (A == null || A.length == 0) {
			return null;
		}
		ArrayList<Integer> startEnd = new ArrayList<Integer>();
		ArrayList<Integer> endStart = new ArrayList<Integer>();
		int len = A.length - 1;
		startEnd.add(A[0]);
		endStart.add(A[len]);
		for (int i = 1; i < len; i++) {
			startEnd.add(A[i] * startEnd.get(i - 1));
			endStart.add(A[len - i] * endStart.get(i - 1));
		}
		int[] b = new int[A.length];
		b[0] = endStart.get(endStart.size() - 1);
		b[b.length - 1] = startEnd.get(startEnd.size() - 1);
		for (int i = 1; i < b.length - 1; i++) {
			b[i] = startEnd.get(i - 1) * endStart.get(endStart.size() - 1 - i);
		}
		return b;
	}

	public boolean duplicate(int numbers[], int length, int[] duplication) {
		if (numbers.length == 0 || numbers == null) {
			duplication[0] = -1;
			return false;
		}
		int[] nums = Arrays.copyOfRange(numbers, 0, length);
		Arrays.sort(numbers);
		boolean flag = false;
		Set<Integer> sets = new HashSet<Integer>();
		for (int i = 1; i < length; i++) {
			if (numbers[i] == numbers[i - 1]) {
				flag = true;
				sets.add(numbers[i]);
			}
		}
		for (int i = 0; i < length; i++) {
			if (sets.contains(nums[i])) {
				duplication[0] = nums[i];
				break;
			}
		}
		return flag;
	}

	public String Serialize(TreeNode root) {
		if (root == null) {
			return "#!";
		}
		StringBuilder sb = new StringBuilder();
		ArrayList<ArrayList<TreeNode>> list = Print(root);
		sb.append(root.val + "!");
		for (int i = 1; i < list.size(); i++) {
			ArrayList<TreeNode> temp = list.get(i - 1);
			int count = 0;
			for (int j = 0; j < temp.size(); j++) {
				if (temp.get(j).left != null) {
					sb.append(list.get(i).get(count++).val + "!");
				} else {
					sb.append("#!");
				}

				if (temp.get(j).right != null) {
					sb.append(list.get(i).get(count++).val + "!");
				} else {

					sb.append("#!");
				}
			}
		}
		return sb.toString();
	}

	public TreeNode Deserialize(String str) {
		return null;
	}

	ArrayList<ArrayList<TreeNode>> Print(TreeNode pRoot) {
		ArrayList<ArrayList<TreeNode>> listAll = new ArrayList<ArrayList<TreeNode>>();
		if (pRoot == null) {
			return listAll;
		}
		Queue<TreeNode> qu = new LinkedList<TreeNode>();
		qu.add(pRoot);
		TreeNode nus = null;// 空指针标记
		qu.add(nus);
		listAll.add(new ArrayList<TreeNode>());
		while (!qu.isEmpty()) {
			TreeNode temp = qu.poll();
			if (temp != nus) {
				listAll.get(listAll.size() - 1).add(temp);
				if (temp.left != null)
					qu.add(temp.left);
				if (temp.right != null)
					qu.add(temp.right);
			} else {
				if (qu.isEmpty()) {
					break;
				}
				qu.add(nus);
				listAll.add(new ArrayList<TreeNode>());
			}
		}
		return listAll;
	}

	public ArrayList<ArrayList<Integer>> Print1(TreeNode pRoot) {
		ArrayList<ArrayList<Integer>> listAll = new ArrayList<ArrayList<Integer>>();
		if (pRoot == null) {
			return listAll;
		}
		int high = treeHigh(pRoot);
		ArrayList<Stack<TreeNode>> sts = new ArrayList<Stack<TreeNode>>();
		for (int i = 0; i < high; i++) {
			sts.add(new Stack<TreeNode>());
		}
		sts.get(0).add(pRoot);
		boolean left_right = true;
		for (int i = 0; i < high; i++) {
			Stack<TreeNode> tmp = sts.get(i);
			ArrayList<Integer> list = new ArrayList<Integer>();
			if (i == high - 1) {
				while (!tmp.isEmpty()) {
					TreeNode temp = tmp.pop();
					list.add(temp.val);
				}
				listAll.add(list);
				break;
			}
			Stack<TreeNode> next = sts.get(i + 1);

			while (!tmp.isEmpty()) {
				TreeNode temp = tmp.pop();
				list.add(temp.val);
				if (left_right) {
					if (temp.left != null)
						next.push(temp.left);
					if (temp.right != null)
						next.push(temp.right);
				} else {
					if (temp.right != null)
						next.push(temp.right);
					if (temp.left != null)
						next.push(temp.left);
				}
			}
			listAll.add(list);
			left_right = !left_right;
		}

		return listAll;
	}

	public int LastRemaining_Solution(int n, int m) {
		if (n == 1) {
			return 0;
		}
		int[] list2 = new int[n];
		for (int i = 0; i < n; i++) {
			list2[i] = i;
		}
		return turnSomeOne(list2, m);
	}

	public int turnSomeOne(int[] list, int m) {
		if (list.length == 1) {
			return list[0];
		}
		int size = list.length;
		int removeChild = (m % size - 1) == -1 ? (list.length - 1) : (m % size - 1);
		// ArrayList<Integer> li=new ArrayList<>();
		int[] li = new int[size - 1];
		int place = 0;
		for (int i = removeChild + 1; i < size; i++) {
			li[place++] = list[i];
		}
		for (int i = 0; i < removeChild; i++) {
			li[place++] = list[i];
		}
		return turnSomeOne(li, m);
	}

	boolean isSymmetrical(TreeNode pRoot) {
		if (pRoot == null) {
			return false;
		}
		if (pRoot.left == null && pRoot.right == null) {
			return true;
		}
		Queue<TreeNode> left = new LinkedList<>();
		Queue<TreeNode> right = new LinkedList<>();
		ArrayList<TreeNode> leftNumbers = new ArrayList<>();
		ArrayList<TreeNode> rightNumbers = new ArrayList<>();
		left.add(pRoot.left);
		right.add(pRoot.right);
		while (!left.isEmpty()) {
			TreeNode temp = left.poll();
			leftNumbers.add(temp);
			if (temp.right != null || temp.left != null) {
				if (temp.right != null)
					right.add(temp.right);
				else {
					right.add(null);
				}
				if (temp.left != null)
					right.add(temp.left);
				else {
					right.add(null);
				}

			}
		}
		while (!right.isEmpty()) {
			TreeNode temp = right.poll();
			rightNumbers.add(temp);
			if (temp.right != null || temp.left != null) {
				if (temp.right != null)
					right.add(temp.right);
				else {
					right.add(null);
				}
				if (temp.left != null)
					right.add(temp.left);
				else {
					right.add(null);
				}
			}

		}
		if (leftNumbers.size() != rightNumbers.size()) {
			return false;
		} else {
			for (int i = 0; i < leftNumbers.size(); i++) {
				if (leftNumbers.get(i) != null && rightNumbers.get(i) == null) {
					return false;
				} else if (leftNumbers.get(i) == null && rightNumbers.get(i) != null) {
					return false;
				} else if (leftNumbers.get(i) != null && rightNumbers.get(i) != null) {
					if (leftNumbers.get(i).val != rightNumbers.get(i).val) {
						return false;
					}
				}

			}
		}
		return true;
	}

	public boolean isContinuous(int[] numbers) {
		int count = 0;
		Arrays.sort(numbers);
		for (int i = 0; i < numbers.length; i++) {
			if (numbers[i] == 0) {
				count++;
			} else {
				break;
			}
		}
		if (count == 0) {
			return isContinue(numbers);
		} else {
			System.out.println(isContinue(Arrays.copyOfRange(numbers, count, numbers.length)));
			if (isContinue(Arrays.copyOfRange(numbers, count, numbers.length))) {
				return true;
			} else {
				int[] a = Arrays.copyOfRange(numbers, count, numbers.length);
				for (int i = 0; i < a.length - 1; i++) {

					if (a[i] == a[i + 1]) {
						return false;
					} else if (a[i + 1] - a[i] >= 2) {
						count = count - (a[i + 1] - a[i] - 1);
					}
					if (count < 0) {
						return false;
					}

				}
			}
		}
		return true;

	}

	public boolean isContinue(int[] numbers) {
		for (int i = 0; i < numbers.length - 1; i++) {
			if (numbers[i] != numbers[i + 1] - 1) {
				return false;
			}
		}
		return true;
	}

	public String ReverseSentence(String str) {
		if (str.equals("")) {
			return str;
		}
		String[] string = str.split(" ");
		if (string.length == 1) {
			return string[0];
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < string.length; i++) {
			if (i == string.length - 1) {
				sb.append(string[string.length - 1 - i]);
			} else {
				sb.append(string[string.length - 1 - i] + " ");
			}
		}
		return sb.toString();
	}

	public String LeftRotateString(String str, int n) {
		if (str.equals("") || n <= 0 || n > str.length()) {
			return str;
		}
		StringBuilder sb = new StringBuilder(str);
		return new StringBuilder(sb.substring(n, sb.length())).append(sb.substring(0, n)).toString();
	}

	public ArrayList<Integer> FindNumbersWithSum(int[] array, int sum) {
		ArrayList<Integer> list = new ArrayList<>();
		if (array.length == 0 || array == null) {
			return list;
		}
		int start = 0;
		int end = 1;
		int length = array.length - 1;
		while (start < end && end <= length) {
			if (array[start] + array[end] == sum) {
				System.out.println(array[start] + "----------" + array[end]);
				if (list.size() > 0) {
					if (array[start] * array[end] < list.get(0) * list.get(1)) {
						list.remove(0);
						list.remove(1);
						list.add(array[start]);
						list.add(array[end]);
					}
				} else {
					list.add(array[start]);
					list.add(array[end]);
				}

				start++;
				length = end--;
				end = start + 1;
			} else if (array[start] + array[end] > sum) {
				start++;
				end = start + 1;
			} else if (array[start] + array[end] < sum) {
				end++;
			}
		}
		return list;
	}

	public ArrayList<ArrayList<Integer>> FindContinuousSequence(int sum) {
		ArrayList<ArrayList<Integer>> listAll = new ArrayList<ArrayList<Integer>>();
		int i = sum / 2 + 1;
		int start = 1;
		int end = 2;
		while (end <= i) {
			if (sumRange(start, end) == sum) {
				ArrayList<Integer> list = new ArrayList<>();
				for (int j = start; j <= end; j++) {
					list.add(j);
				}
				listAll.add(list);
				start = start + 1;
			} else if (sumRange(start, end) < sum) {
				end++;
			} else if (sumRange(start, end) > sum) {
				start++;
			}
		}
		return listAll;
	}

	public int sumRange(int start, int end) {
		return (start + end) * (end - start + 1) / 2;
	}

	public boolean IsBalanced_Solution(TreeNode root) {
		if (root == null) {
			return true;
		}
		return Math.abs(treeHigh(root.left) - treeHigh(root.right)) <= 1 ? true : false;
	}

	public int treeHigh(TreeNode node) {
		if (node == null) {
			return 0;
		}
		return Math.max(treeHigh(node.left), treeHigh(node.right)) + 1;
	}

	public void FindNumsAppearOnce(int[] array, int num1[], int num2[]) {
		// int size = Integer.MAX_VALUE;
		// int[] num = new int[size];
		// for (int i = 0; i < array.length; i++) {
		// num[array[i]]++;
		// }
		// boolean flag = false;
		// for (int i = 0; i < num.length; i++) {
		// if (num[i] == 1) {
		// if (flag) {
		// num2[0] = i;
		// } else {
		// num1[0] = i;
		// flag = true;
		// }
		// }
		// }
	}

	// 二叉树非递归中序遍历

	public int TreeDepth(TreeNode root) {
		if (root == null) {
			return 0;
		}
		return Math.max(TreeDepth(root.left), TreeDepth(root.right)) + 1;
	}

	public int GetNumberOfK(int[] array, int k) {
		if (array.length == 0 || array == null) {
			return 0;
		}
		int count = 0;
		int low = 0;
		int high = array.length - 1;
		int place = -1;
		while (low <= high) {
			int mid = (low + high) / 2;
			if (array[mid] == k) {
				place = mid;
				break;
			} else if (k < array[mid]) {
				high = mid - 1;
			} else {
				low = mid + 1;
			}
		}
		if (place == -1) {
			return count;
		}
		count++;
		low = place - 1;
		high = place + 1;
		while (high <= array.length - 1) {
			if (array[high] == k) {
				count++;
				high++;
			} else {
				break;
			}
		}
		while (low >= 0) {
			if (array[low] == k) {
				count++;
				low--;
			} else {
				break;
			}
		}
		return count;
	}

	public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
		if (pHead1 == null || pHead2 == null) {
			return null;
		}
		ListNode head1 = pHead1;
		ListNode head2 = pHead2;
		while (head1 != null && head2 != null) {
			head1 = head1.next;
			head2 = head2.next;
		}
		if (head1 != null) {
			while (head1 != null) {
				pHead1 = pHead1.next;
				head1 = head1.next;
			}
		}
		if (head2 != null) {
			while (head2 != null) {
				pHead2 = pHead2.next;
				head2 = head2.next;
			}
		}
		while (pHead1 != null && pHead2 != null) {
			if (pHead1 == pHead2) {
				return pHead1;
			}
			pHead1 = pHead1.next;
			pHead2 = pHead2.next;
		}
		return null;
	}

	public int InversePairs(int[] array) {
		Long s = System.currentTimeMillis();
		if (array.length == 0 || array == null) {
			return 0;
		}
		int len = array.length;
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = len - 1; i >= 0; i--) {
			if (i == len - 1) {
				map.put(array[i], 0);
			} else {
				int[] nums = Arrays.copyOfRange(array, i + 1, array.length);
				Arrays.sort(nums);
				int j = nums.length - 1;
				while (j >= 0) {
					if (array[i] > nums[j]) {
						map.put(array[i], map.get(nums[j]) + 1);
						break;
					} else {
						j--;
						if (j == -1) {
							map.put(array[i], 0);
						}
					}
				}

			}

		}
		int p = 0;
		for (Integer i : map.values()) {
			p = p + i;
		}
		System.out.println(System.currentTimeMillis() - s);
		return p % 1000000007;
	}

	public int FirstNotRepeatingChar(String str) {
		if (str == "") {
			return 0;
		}
		int[] array = new int[52];
		for (int i = 0; i < str.length(); i++) {
			char x = str.charAt(i);
			int c = 0;
			if (Character.isLowerCase(x)) {
				c = x - 'a';
			} else {
				c = x - 'A' + 26;
			}
			array[c]++;
		}
		for (int i = 0; i < str.length(); i++) {
			char x = str.charAt(i);
			int c = 0;
			if (Character.isLowerCase(x)) {
				c = x - 'a';
			} else {
				c = x - 'A' + 26;
			}
			if (array[c] == 1) {
				return i;
			}
			;
		}
		return 0;
	}

	public int GetUglyNumber_Solution(int index) {
		if (index <= 0) {
			return 0;
		}
		int[] num = new int[index + 1];
		num[1] = 1;
		int min2 = 1;
		int min3 = 1;
		int min5 = 1;
		for (int i = 2; i <= index; i++) {
			num[i] = Math.min(Math.min(num[min2] * 2, num[min3] * 3), num[min5] * 5);
			if (num[min2] * 2 == num[i])
				min2++;
			if (num[min3] * 3 == num[i])
				min3++;
			if (num[min5] * 5 == num[i])
				min5++;
		}
		return num[index];
	}

	public boolean isUgily(int i) {
		if (i % 2 != 0 && i % 5 != 0 && i % 3 != 0 && i == 1) {
			return true;
		}
		if (i % 2 != 0 && i % 5 != 0 && i % 3 != 0 && i != 1) {
			return false;
		}
		while (i % 2 == 0) {
			i = i / 2;
		}
		while (i % 5 == 0) {
			i = i / 5;
		}
		while (i % 3 == 0) {
			i = i / 3;
		}
		if (i == 1) {
			return true;
		} else {
			return false;
		}
	}

	public int mutil(int i) {
		if (i == 0) {
			return 1;
		}
		int result = 1;
		for (int j = 1; j <= i; j++) {
			result = result * 10;
		}
		return result;
	}

	public int StrToInt(String str) {
		if (str.equals("")) {
			return 0;
		}
		int num = 0;
		int flag = 1;
		if (str.charAt(0) == '+') {
			flag = 1;
			str = str.substring(1, str.length());
		} else if (str.charAt(0) == '-') {
			flag = -1;
			str = str.substring(1, str.length());
		}
		for (int i = 0; i < str.length(); i++) {
			if ((str.charAt(str.length() - 1 - i) >= '0' && str.charAt(str.length() - 1 - i) <= '9')) {
				int c = str.charAt(str.length() - 1 - i) - '0';
				num = num + c * mutil(i);
			} else {
				return 0;
			}
		}
		return num * flag;
	}

	/*
	 * public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree==null){
	 * return null; } Stack<TreeNode> stack=new Stack<TreeNode>(); TreeNode
	 * p=pRootOfTree; TreeNode pre=null; TreeNode root=null; boolean
	 * isFirst=true; while(p!=null|| !stack.isEmpty()){ while(p!=null){
	 * stack.push(p); p=p.left; } p=stack.pop(); if(isFirst){ root=p; pre=root;
	 * isFirst=false; }else{ pre.right=p; p.left=pre; pre=p; } p=p.left; }
	 * 
	 * return root; }
	 */

	/*
	 * boolean isSymmetrical(TreeNode pRoot) { if (pRoot==null) { return false;
	 * }
	 * 
	 * }
	 * 
	 * public boolean isLeftEqualRight(TreeNode root1,TreeNode root2){
	 * 
	 * }
	 */

	public TreeLinkNode GetNext(TreeLinkNode pNode) {
		if (pNode == null) {
			return null;
		}
		TreeLinkNode head = pNode;
		ArrayList<TreeLinkNode> list = new ArrayList<>();
		if (pNode.next != null) {
			if (pNode.next.next != null) {
				LNR(pNode.next.next, list);
			} else {
				LNR(pNode.next, list);
			}
		} else {
			LNR(pNode, list);
		}
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) == head) {
				return i >= list.size() ? null : list.get(i + 1);
			}
		}
		return null;
	}

	public void LNR(TreeLinkNode pNode, ArrayList<TreeLinkNode> list) {
		if (pNode == null) {
			return;
		}
		LNR(pNode.left, list);
		list.add(pNode);
		LNR(pNode.right, list);
	}

	public ListNode deleteDuplication(ListNode pHead) {
		if (pHead == null) {
			return null;
		}
		if (pHead.next == null) {
			return pHead;
		}
		ListNode newHead = pHead;
		ListNode tempNode = pHead.next;
		if (tempNode.val != newHead.val) {
			newHead.next = deleteDuplication(tempNode);
			return newHead;
		} else {
			while (tempNode.val == newHead.val) {

				tempNode = tempNode.next;

			}
			return deleteDuplication(tempNode);
		}
	}

	public ListNode EntryNodeOfLoop(ListNode pHead) {
		if (pHead == null) {
			return null;
		}
		if (pHead.next == pHead) {
			return pHead;
		}
		// ArrayList<ListNode> list=new ArrayList<ListNode>();
		// while(pHead!=null){
		// if(list.contains(pHead)){
		// return pHead;
		// }
		// list.add(pHead);
		// pHead=pHead.next;
		// }
		// return null;
		ListNode pSlow = pHead;
		ListNode pFast = pHead;
		while (pFast != null) {
			pSlow = pSlow.next;
			pFast = pFast.next.next;
			if (pSlow == pFast) {
				pSlow = pHead;
				while (pSlow != pFast) {
					pSlow = pSlow.next;
					pFast = pFast.next;
				}
				return pSlow;
			}
		}
		return null;
	}

	// public ArrayList<String> Permutation(String str) {
	//
	// }
	//
	// public String[] strAppend(String str,ArrayList<String> list){
	// if(str.length()==2){
	// StringBuilder sbb=new StringBuilder(str);
	// String[] ss={sbb.toString(),sbb.reverse().toString()};
	// return ss;
	// }
	// StringBuilder sb=new StringBuilder(str);
	// for(int i=0;i<sb.length();i++){
	// sb.charAt(i)+strAppend(sb.replace(i, i+1, ''.toString()), list);
	// }
	// }

	public TreeNode Convert(TreeNode pRootOfTree) {
		if (pRootOfTree == null) {
			return null;
		}
		if (pRootOfTree.left == null && pRootOfTree.right == null) {
			return pRootOfTree;
		}
		TreeNode left = Convert(pRootOfTree.left);
		TreeNode p = left;
		while (p != null && p.right != null) {
			p = p.right;
		}
		if (left != null) {
			p.right = pRootOfTree;
			pRootOfTree.left = p;
		}

		TreeNode right = Convert(pRootOfTree.right);
		if (right != null) {
			right.left = pRootOfTree;
			pRootOfTree.right = right;
		}
		return left != null ? left : pRootOfTree;
	}

	public void getEvery(TreeNode root, ArrayList<TreeNode> list) {
		if (root == null) {
			return;
		}
		getEvery(root.left, list);
		list.add(root);
		getEvery(root.right, list);
	}

	public RandomListNode Clone(RandomListNode pHead) {
		if (pHead == null) {
			return null;
		}
		ArrayList<RandomListNode> list = new ArrayList<RandomListNode>();
		ArrayList<RandomListNode> newList = new ArrayList<RandomListNode>();
		RandomListNode newHead = new RandomListNode(pHead.label);
		list.add(pHead);
		newList.add(newHead);
		RandomListNode lastHead = newHead;
		newHead = null;
		RandomListNode temp = pHead.next;
		while (temp != null) {
			RandomListNode node = new RandomListNode(temp.label);
			lastHead.next = node;
			lastHead = node;
			list.add(temp);
			newList.add(node);
			temp = temp.next;
		}
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).random == null) {
				newList.get(i).random = null;
			} else {
				for (int j = 0; j < list.size(); j++) {
					if (list.get(i).random == list.get(j)) {
						newList.get(i).random = newList.get(j);
					}
				}
			}

		}
		return newHead;
	}
}
